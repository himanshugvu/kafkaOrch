#!/usr/bin/env python3
from __future__ import annotations
import argparse
import csv
from pathlib import Path

import matplotlib.pyplot as plt


def load_latencies(csv_path: Path) -> list[float]:
    latencies: list[float] = []
    with csv_path.open("r", encoding="utf-8") as fh:
        reader = csv.reader(fh)
        header = next(reader, None)
        for row in reader:
            if not row:
                continue
            try:
                latencies.append(float(row[0]))
            except ValueError:
                continue
    return latencies


def main() -> None:
    parser = argparse.ArgumentParser(description="Plot latency distribution from Locust run")
    parser.add_argument("csv", type=Path, help="Path to latency_samples.csv generated by locustfile")
    parser.add_argument("--png", type=Path, default=Path("latency_histogram.png"), help="Output PNG path")
    parser.add_argument("--bins", type=int, default=100, help="Histogram bins")
    args = parser.parse_args()

    latencies = load_latencies(args.csv)
    if not latencies:
        raise SystemExit("No latency samples found; ensure the load test completed and produced data.")

    plt.figure(figsize=(12, 6))
    plt.hist(latencies, bins=args.bins, color="royalblue", alpha=0.85)
    plt.title("Kafka End-to-End Latency Distribution")
    plt.xlabel("Latency (ms)")
    plt.ylabel("Message count")
    plt.grid(True, linestyle="--", alpha=0.4)
    plt.tight_layout()
    plt.savefig(args.png, dpi=150)
    print(f"Histogram written to {args.png}")


if __name__ == "__main__":
    main()
